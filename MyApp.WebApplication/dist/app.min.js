angular.module('app', ['ui.router']).config(function ($stateProvider, $locationProvider) {
    var states = [
        {
            name: 'test',
            url: '/test',
            template: '<p>This is a test</p>'
        },
        {
            name: 'blurg',
            url: '/blurg',
            template: '<blurg name="$resolve.name"></blurg>',
            resolve: {
                name: function () {
                    return "Blurg";
                }
            }
        },
        {
            name: 'thing',
            url: '/things/{id}',
            template: '<thing-view thing-id="$resolve.thingId"></thing-view>',
            resolve: {
                thingId: function ($stateParams) {
                    return $stateParams["id"];
                }
            }
        },
        {
            name: 'things',
            url: '/things',
            template: '<thing-list></thing-list>'
        }
    ];
    states.forEach(function (state) { return $stateProvider.state(state); });
});
angular.module('app').component('blurg', {
    template: '<p>name: {{$ctrl.name}}</p>',
    controller: function () {
    },
    bindings: {
        name: '<?'
    }
});
var ThingListComponent = (function () {
    function ThingListComponent(ThingService) {
        this.ThingService = ThingService;
    }
    ThingListComponent.prototype.$onInit = function () {
        var _this = this;
        this.initPromise = this.ThingService.getAll().then(function (response) { return _this.things = response.data; });
    };
    return ThingListComponent;
}());
angular.module('app').component('thingList', {
    templateUrl: 'App/ThingListComponent.html',
    controller: ThingListComponent
});
var ThingViewComponent = (function () {
    function ThingViewComponent(ThingService, $q, $location) {
        this.ThingService = ThingService;
        this.$q = $q;
        this.$location = $location;
    }
    ThingViewComponent.prototype.$onInit = function () {
        var _this = this;
        if (this.thingId == 'new') {
            this.thing = {};
            this.initPromise = this.$q.all([]);
        }
        else
            this.initPromise = this.ThingService.get(this.thingId).then(function (response) { return _this.thing = response.data; });
    };
    ThingViewComponent.prototype.save = function () {
        var _this = this;
        if (this.thing.id)
            this.savePromise = this.ThingService.update(this.thing.id, this.thing);
        else
            this.savePromise = this.ThingService.insert(this.thing).then(function (response) {
                _this.thing.id = response.data;
                _this.thingId = response.data;
            });
    };
    return ThingViewComponent;
}());
angular.module('app').component('thingView', {
    templateUrl: 'app/ThingViewComponent.html',
    controller: ThingViewComponent,
    bindings: {
        thingId: '<'
    }
});
var ThingService = (function () {
    function ThingService($http) {
        this.$http = $http;
    }
    ThingService.prototype.get = function (id) {
        return this.$http({
            url: "api/things/" + id,
            method: "get",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    ThingService.prototype.getAll = function () {
        return this.$http({
            url: "api/things",
            method: "get",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    ThingService.prototype.insert = function (dto) {
        return this.$http({
            url: "api/things",
            method: "post",
            data: typeof (dto) === 'string' ? '"' + dto + '"' : dto
        });
    };
    ThingService.prototype.update = function (id, dto) {
        return this.$http({
            url: "api/things/" + id,
            method: "put",
            data: typeof (dto) === 'string' ? '"' + dto + '"' : dto
        });
    };
    ThingService.prototype.delete = function (id) {
        return this.$http({
            url: "api/things/" + id,
            method: "delete",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    return ThingService;
}());
angular.module("app").service("ThingService", ["$http", ThingService]);
var Thing = (function () {
    function Thing() {
    }
    return Thing;
}());
var WidgetService = (function () {
    function WidgetService($http) {
        this.$http = $http;
    }
    WidgetService.prototype.get = function (id) {
        return this.$http({
            url: "api/widgets/" + id,
            method: "get",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    WidgetService.prototype.getAll = function () {
        return this.$http({
            url: "api/widgets",
            method: "get",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    WidgetService.prototype.insert = function (dto) {
        return this.$http({
            url: "api/widgets",
            method: "post",
            data: typeof (dto) === 'string' ? '"' + dto + '"' : dto
        });
    };
    WidgetService.prototype.update = function (id, dto) {
        return this.$http({
            url: "api/widgets/" + id,
            method: "put",
            data: typeof (dto) === 'string' ? '"' + dto + '"' : dto
        });
    };
    WidgetService.prototype.delete = function (id) {
        return this.$http({
            url: "api/widgets/" + id,
            method: "delete",
            data: typeof (null) === 'string' ? '"' + null + '"' : null
        });
    };
    return WidgetService;
}());
angular.module("app").service("WidgetService", ["$http", WidgetService]);
var Widget = (function () {
    function Widget() {
    }
    return Widget;
}());

//# sourceMappingURL=app.min.js.map
